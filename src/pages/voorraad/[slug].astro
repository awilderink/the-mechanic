---
import type { GetStaticPaths } from "astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import Title from "../../components/Title.astro";
import Icon from "../../components/Icon.astro";
import Button from "../../components/Button.astro";
import Accordion from "../../components/Accordion.astro";
import AccordionItem from "../../components/AccordionItem.astro";
import HighlightedVoorraad from "../../components/HighlightedVoorraad.astro";
import directus from "../../lib/directus";
import { readItems } from "@directus/sdk";
import DirectusImage from "../../components/DirectusImage.astro";

export const prerender = true;

const { slug } = Astro.params;

const voorraadItems = await directus.request(
  readItems("voorraad", {
    limit: 1,
    fields: ["*", { merk: ["*"], fotos: [{ directus_files_id: ["*"] }] }],
    filter: {
      slug: {
        _eq: slug as string,
      },
    },
  }),
);

const voorraadItem = voorraadItems[0];
const fotos = voorraadItem.fotos.filter((image) => typeof image !== "number");

export const getStaticPaths: GetStaticPaths = async () => {
  const voorraad = await directus.request(
    readItems("voorraad", {
      fields: ["slug"],
    }),
  );
  return voorraad.map((item) => ({
    params: { slug: item.slug },
    props: { item },
  }));
};

const merk =
  typeof voorraadItem.merk !== "number" ? voorraadItem.merk.naam : "Onbekend";
---

<style>
  .car-grid {
    grid-template-areas:
      "images"
      "thumbnails"
      "details"
      "actions"
      "info";
    grid-template-columns: 1fr;
  }

  @media (min-width: 768px) {
    .car-grid {
      grid-template-areas:
        "images thumbnails"
        "images details"
        "images details"
        "info   details";
      grid-template-columns: 6fr 4fr;
      grid-template-rows: auto auto 1fr auto;
    }
  }
</style>
<BaseLayout>
  <section class="p-4">
    <div
      class="car-grid container mx-auto grid max-w-6xl gap-4 pt-24 md:flex-row md:gap-10"
    >
      <div
        class="embla__viewport relative overflow-hidden rounded-xl [grid-area:images]"
        transition:name={fotos[0]?.directus_files_id.id}
      >
        <div class="embla__container flex gap-4">
          {
            fotos.map((image) => (
              <DirectusImage
                class="embla__slide min-w-0 shrink-0 grow-0 basis-full"
                height={600}
                width={800}
                file={image.directus_files_id}
              />
            ))
          }
        </div>
        <div class="text-primary absolute right-6 bottom-6 flex gap-2">
          <button
            class="embla-button__prev hover:text-sand"
            aria-label="Vorige"
          >
            <Icon name="circle-arrow-left" class="size-10" />
          </button>
          <button
            class="embla-button__next hover:text-sand"
            aria-label="Volgende"
          >
            <Icon name="circle-arrow-right" class="size-10" />
          </button>
        </div>
      </div>

      <div class="min-w-0 [grid-area:thumbnails]">
        <h1 class="text-primary text-2xl md:text-4xl">
          {merk}{" "}
          {voorraadItem.model}
        </h1>
        <div class="embla-thumbs__viewport mt-2 overflow-hidden">
          <div class="embla-thumbs__container flex flex-row gap-1">
            {
              fotos.map((image) => (
                <div class="group embla-thumbs__slide relative min-w-0 shrink-0 grow-0 basis-1/8 overflow-hidden rounded-md">
                  <div class="absolute inset-0 bg-neutral-200/50 transition-colors duration-75 group-[.active]:bg-neutral-200/0 hover:bg-neutral-200/0" />
                  <DirectusImage
                    height={40}
                    width={60}
                    class="h-full w-full object-cover"
                    file={image.directus_files_id}
                  />
                </div>
              ))
            }
          </div>
        </div>
      </div>
      <div class="relative mt-2 flex flex-col [grid-area:details]">
        <div class="sticky top-8 z-10">
          {
            voorraadItem.highlight && (
              <Title variant="tertiary" class="text-primary mb-2">
                {voorraadItem.highlight}
              </Title>
            )
          }
          <div>
            <dl
              class="[&_dd]:text-primary grid grid-cols-2 gap-6 font-light md:grid-cols-3 [&_dt]:text-neutral-500"
            >
              <div>
                <dt>Bouwjaar</dt>
                <dd>{voorraadItem.bouwjaar}</dd>
              </div>
              <div>
                <dt>Km stand</dt>
                <dd>
                  {
                    Intl.NumberFormat("nl-NL").format(
                      Number(voorraadItem.km_stand),
                    )
                  } km
                </dd>
              </div>
              <div>
                <dt>Prijs</dt>
                <dd>
                  {
                    Intl.NumberFormat("nl-NL", {
                      currency: "EUR",
                      style: "currency",
                    }).format(Number(voorraadItem.prijs))
                  }
                </dd>
              </div>
              <div>
                <dt>Brandstof</dt>
                <dd class="capitalize">{voorraadItem.brandstof}</dd>
              </div>
              <div>
                <dt>Motorinhoud</dt>
                <dd>{voorraadItem.motor_inhoud}</dd>
              </div>
              <div>
                <dt>Kleur</dt>
                <dd>{voorraadItem.kleur}</dd>
              </div>
            </dl>
          </div>
          <div class="mt-4 flex flex-col gap-2">
            <Button class="flex items-center justify-center gap-2 font-thin">
              <Icon class="mr-2 h-4 w-4" name="phone" />
              <span>070 8209890</span>
            </Button>
            <Button
              class="flex items-center justify-center gap-2 font-thin"
              variant="secondary"
            >
              <Icon name="email" class="mr-2 h-4 w-4" />
              info@themechanic.nl
            </Button>
          </div>
        </div>
      </div>
      <div class="container mx-auto mt-10 max-w-6xl [grid-area:info]">
        <div class="flex items-center justify-between">
          <h1 class="text-4xl">{merk}{" "}{voorraadItem.model}</h1>
          <div class="flex gap-1">
            <Icon name="linkedIn" class="h-9 w-9" />
            <Icon name="facebook" class="h-9 w-9" />
            <Icon name="instagram" class="h-9 w-9" />
          </div>
        </div>
        <Accordion class="mt-8">
          {
            voorraadItem.teksten?.map(({ titel, tekst }, i) => (
              <AccordionItem open={!i}>
                <span slot="title">{titel}</span>
                <div set:html={tekst} />
              </AccordionItem>
            ))
          }
        </Accordion>
      </div>
    </div>
  </section>
  <section class="bg-sand px-4 py-14">
    <div class="container mx-auto max-w-6xl">
      <HighlightedVoorraad exclude={voorraadItem.slug} />
    </div>
  </section>
</BaseLayout>

<script>
  import EmblaCarousel, { type EmblaCarouselType } from "embla-carousel";

  document.addEventListener("astro:page-load", () => {
    const mainCarouselNode = document.querySelector(
      ".embla__viewport",
    ) as HTMLElement;
    const thumbCarouselNode = document.querySelector(
      ".embla-thumbs__viewport",
    ) as HTMLElement;

    const addThumbBtnsClickHandlers = (
      emblaApiMain: EmblaCarouselType,
      emblaApiThumb: EmblaCarouselType,
    ) => {
      const slidesThumbs = emblaApiThumb.slideNodes();

      const scrollToIndex = slidesThumbs.map(
        (_, index) => () => emblaApiMain.scrollTo(index),
      );

      slidesThumbs.forEach((slideNode, index) => {
        slideNode.addEventListener("click", scrollToIndex[index], false);
      });

      return () => {
        slidesThumbs.forEach((slideNode, index) => {
          slideNode.removeEventListener("click", scrollToIndex[index], false);
        });
      };
    };

    const addToggleThumbBtnsActive = (
      emblaApiMain: EmblaCarouselType,
      emblaApiThumb: EmblaCarouselType,
    ) => {
      const slidesThumbs = emblaApiThumb.slideNodes();

      const toggleThumbBtnsState = () => {
        emblaApiThumb.scrollTo(emblaApiMain.selectedScrollSnap());
        const previous = emblaApiMain.previousScrollSnap();
        const selected = emblaApiMain.selectedScrollSnap();
        slidesThumbs[previous].classList.remove("active");
        slidesThumbs[selected].classList.add("active");
      };

      emblaApiMain.on("select", toggleThumbBtnsState);
      emblaApiThumb.on("init", toggleThumbBtnsState);

      return () => {
        const selected = emblaApiMain.selectedScrollSnap();
        slidesThumbs[selected].classList.remove("active");
      };
    };

    const addPrevNextBtnsClickHandlers = (emblaApiMain: EmblaCarouselType) => {
      const prevBtn = document.querySelector(
        ".embla-button__prev",
      ) as HTMLElement;
      const nextBtn = document.querySelector(
        ".embla-button__next",
      ) as HTMLElement;

      const scrollToPrev = () => emblaApiMain.scrollPrev();
      const scrollToNext = () => emblaApiMain.scrollNext();

      prevBtn.addEventListener("click", scrollToPrev, false);
      nextBtn.addEventListener("click", scrollToNext, false);

      return () => {
        prevBtn.removeEventListener("click", scrollToPrev, false);
        nextBtn.removeEventListener("click", scrollToNext, false);
      };
    };

    if (!mainCarouselNode || !thumbCarouselNode) return;
    const emblaApiMain = EmblaCarousel(mainCarouselNode, {});
    const emblaApiThumb = EmblaCarousel(thumbCarouselNode, {
      dragFree: true,
      containScroll: "keepSnaps",
    });

    const removeThumbBtnsClickHandlers = addThumbBtnsClickHandlers(
      emblaApiMain,
      emblaApiThumb,
    );
    const removeToggleThumbBtnsActive = addToggleThumbBtnsActive(
      emblaApiMain,
      emblaApiThumb,
    );
    const removePrevNextBtnsClickHandlers =
      addPrevNextBtnsClickHandlers(emblaApiMain);

    emblaApiMain
      .on("destroy", removeThumbBtnsClickHandlers)
      .on("destroy", removeToggleThumbBtnsActive)
      .on("destroy", removePrevNextBtnsClickHandlers);

    emblaApiThumb
      .on("destroy", removeThumbBtnsClickHandlers)
      .on("destroy", removeToggleThumbBtnsActive);
  });
</script>
