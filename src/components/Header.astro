---
import { getGlobal } from "../sanity";
import type { Slug } from "../sanity/types";
import Button from "./Button.astro";
import HeaderLink from "./HeaderLink.astro";
import TextLogo from "./TextLogo.astro";

interface Props {
  transparent?: boolean;
}

const { transparent = false } = Astro.props;

const global = await getGlobal();
const menuItems = global?.mainMenu || [];

const getUrl = (slug?: Slug | null) => {
  return slug?.current || '#';
};
---

<header
  class="fixed top-0 right-0 left-0 z-50 transition-transform font-thin"
  id="site-header"
>
  <nav
    class:list={[
      "p-4",
      { "bg-transparent": transparent, "bg-white": !transparent },
    ]}
  >
    <div class="container mx-auto flex max-w-6xl items-center justify-between">
      <a href="/">
        <TextLogo class="h-6 text-[#b0b1b3] md:h-8" />
      </a>
      <div class="hidden items-center gap-6 md:flex">
        {
          menuItems.map((item) =>
            item.children && item.children.length > 0 ? (
              <div class="relative group">
                <span class="flex items-center gap-1 cursor-pointer text-gray-700 hover:text-tertiary transition-colors duration-200 relative after:absolute after:bottom-0 after:left-0 after:w-0 after:h-0.5 after:bg-tertiary after:transition-all after:duration-300 hover:after:w-full">
                  {item.title}
                  <svg
                    class="w-4 h-4 transition-transform group-hover:rotate-180"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </span>
                <div class="absolute top-full right-0 mt-2 w-56 bg-white shadow-xl border border-gray-200 rounded-md opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
                  {item.children.map((child) => (
                    <a
                      href={getUrl(child.slug)}
                      class="block px-6 py-3 text-sm text-gray-700 hover:bg-gray-50 hover:text-gray-900 first:rounded-t-md last:rounded-b-md transition-all duration-150 hover:pl-8 border-l-2 border-transparent hover:border-tertiary"
                    >
                      {child.title}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <HeaderLink href={getUrl(item.slug)}>{item.title}</HeaderLink>
            )
          )
        }
        <Button variant="tertiary">Contact</Button>
      </div>
      <div
        class="md:hidden"
        x-data="{ open: false }"
        x-on:resize.window="open = false"
        x-effect="if (open) { document.body.style.position = 'fixed' } else { document.body.style.position = 'relative' }"
      >
        <div
          @click="open = !open"
          class="bg-tertiary relative z-20 flex size-12 cursor-pointer items-center justify-center rounded-full text-white"
        >
          <button class="cursor-pointer">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="size-8 transition-transform"
              :class="{ 'rotate-45': open }"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="1"
                d="M4 9h16M4 15h16"
                x-show="!open"></path>
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="1"
                d="M12 4v16M4 12h16"
                x-cloak
                x-show="open"></path>
            </svg>
          </button>
        </div>
        <div
          x-show="open"
          x-collapse
          x-cloak
          class="bg-tertiary fixed top-0 right-0 z-10 w-full"
        >
          <div class="flex h-dvh flex-col p-10 text-white">
            <div
              class="flex grow flex-col justify-center space-y-8 text-4xl [&_a]:block"
            >
              {
                menuItems.map((item) => (
                  <div>
                    {item.children && item.children.length > 0 ? (
                      <div>
                        <span class="flex items-center gap-2">
                          {item.title}
                        </span>
                        <div class="space-y-6 mt-6 pl-6 text-2xl text-white/90">
                          {item.children.map((child) => (
                            <a href={getUrl(child?.slug)}>{child.title}</a>
                          ))}
                        </div>
                      </div>
                    ) : (
                      <a href={getUrl(item?.slug)}>{item.title}</a>
                    )}
                  </div>
                ))
              }
              <a href="/contact">Contact</a>
            </div>
            <div class="text-2xl text-white/50">Passie voor auto's</div>
          </div>
        </div>
      </div>
    </div>
  </nav>
</header>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    let prevScrollPos = window.scrollY;
    const header = document.getElementById("site-header");

    if (header) {
      const handleScroll = () => {
        const currentScrollPos = window.scrollY;
        if (prevScrollPos > currentScrollPos || currentScrollPos <= 0) {
          // Scrolling up
          header.style.transform = "translateY(0)";
        } else {
          // Scrolling down
          header.style.transform = "translateY(-100%)";
        }
        prevScrollPos = currentScrollPos;
      };

      window.addEventListener("scroll", handleScroll);
    }
  });
</script>
