---
import type { DirectusFile } from "@directus/sdk";
import { getDirectusUrl } from "../utils";
import { type RemoteImageProps } from "astro:assets";

export interface Props
  extends Omit<RemoteImageProps, "src" | "alt" | "width" | "sizes"> {
  file: DirectusFile;
  sizes: { width: number; height: number }[];
  alt?: string | null;
  formats?: ("webp" | "jpg" | "png" | "avif")[];
  withoutEnlargement?: boolean;
}

const {
  file,
  fit,
  sizes,
  formats = ["webp", "jpg"],
  quality,
  withoutEnlargement,
  alt,
  ...props
} = Astro.props;

function generateImageUrl(width: number, height: number, format: string) {
  const src = new URL(getDirectusUrl(file));
  src.searchParams.set("width", width.toString());
  src.searchParams.set("height", height.toString());
  src.searchParams.set("format", format);

  if (fit) src.searchParams.set("fit", fit);
  if (quality) src.searchParams.set("quality", quality.toString());
  if (withoutEnlargement === false)
    src.searchParams.set("withoutEnlargement", "false");
  return src.toString();
}
---

<picture>
  {
    formats.map((format) =>
      sizes
        .sort((a, b) => b.width - a.width)
        .map(({ width, height }) => (
          <source
            type={`image/${format}`}
            srcset={generateImageUrl(width, height, format)}
            media={`(min-width: ${width}px)`}
          />
        )),
    )
  }
  <img
    src={generateImageUrl(
      sizes[0].width,
      sizes[0].height,
      formats[formats.length - 1],
    )}
    alt={alt || file.title}
    loading="lazy"
    decoding="async"
    {...props}
  />
</picture>
