/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type FeaturedVoorraadSection = {
  _type: "featuredVoorraadSection";
  title?: string;
};

export type ReviewsSection = {
  _type: "reviewsSection";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  reviews?: Array<{
    naam?: string;
    body?: string;
    _key: string;
  }>;
};

export type CardSection = {
  _type: "cardSection";
  title?: string;
  cards?: Array<{
    icoon?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    titel?: string;
    body?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }>;
    link?: string;
    _key: string;
  }>;
};

export type ContentSection = {
  _type: "contentSection";
  sectionTitle?: string;
  mainTitle?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  buttonText?: string;
  buttonUrl?: string;
};

export type TeamSection = {
  _type: "teamSection";
  title?: string;
  members?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "teamMember";
  }>;
};

export type ImageSection = {
  _type: "imageSection";
  images?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    alt?: string;
    _key: string;
  }>;
};

export type TextContent = {
  _type: "textContent";
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
};

export type HeroImageSection = {
  _type: "heroImageSection";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  alt?: string;
};

export type Hero = {
  _type: "hero";
  title?: string;
  subtitle?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  video?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
  buttons?: Array<{
    text?: string;
    url?: string;
    style?: "primary" | "secondary" | "tertiary" | "outline";
    _key: string;
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
}>;

export type Voorraad = {
  _id: string;
  _type: "voorraad";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titel?: string;
  merk?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "merk";
  };
  slug?: Slug;
  prijs?: number;
  bouwjaar?: number;
  kilometerstand?: number;
  brandstof?: "benzine" | "diesel" | "elektrisch" | "hybride";
  transmissie?: "handgeschakeld" | "automaat";
  verkocht?: boolean;
  uitgelicht?: boolean;
  fotos?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  beschrijving?: BlockContent;
  specificaties?: Array<{
    label?: string;
    waarde?: string;
    _key: string;
  }>;
};

export type Merk = {
  _id: string;
  _type: "merk";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  naam?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type TeamMember = {
  _id: string;
  _type: "teamMember";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  naam?: string;
  functie?: string;
  afbeelding?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: string;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
  };
  blocks?: Array<{
    _key: string;
  } & Hero | {
    _key: string;
  } & HeroImageSection | {
    _key: string;
  } & TextContent | {
    _key: string;
  } & ImageSection | {
    _key: string;
  } & TeamSection | {
    _key: string;
  } & ContentSection | {
    _key: string;
  } & CardSection | {
    _key: string;
  } & ReviewsSection | {
    _key: string;
  } & FeaturedVoorraadSection>;
};

export type Home = {
  _id: string;
  _type: "home";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  blocks?: Array<{
    _key: string;
  } & Hero | {
    _key: string;
  } & HeroImageSection | {
    _key: string;
  } & TextContent | {
    _key: string;
  } & ImageSection | {
    _key: string;
  } & TeamSection | {
    _key: string;
  } & ContentSection | {
    _key: string;
  } & CardSection | {
    _key: string;
  } & ReviewsSection | {
    _key: string;
  } & FeaturedVoorraadSection>;
};

export type Global = {
  _id: string;
  _type: "global";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = FeaturedVoorraadSection | ReviewsSection | CardSection | ContentSection | TeamSection | ImageSection | TextContent | HeroImageSection | Hero | BlockContent | Voorraad | Merk | TeamMember | Page | Home | Global | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/index.ts
// Variable: globalQuery
// Query: *[_type == "global"][0]{    _id,    title,    description  }
export type GlobalQueryResult = {
  _id: string;
  title: string | null;
  description: string | null;
} | null;
// Variable: homeQuery
// Query: *[_type == "home"][0]{    _id,    blocks  }
export type HomeQueryResult = {
  _id: string;
  blocks: Array<{
    _key: string;
  } & CardSection | {
    _key: string;
  } & ContentSection | {
    _key: string;
  } & FeaturedVoorraadSection | {
    _key: string;
  } & Hero | {
    _key: string;
  } & HeroImageSection | {
    _key: string;
  } & ImageSection | {
    _key: string;
  } & ReviewsSection | {
    _key: string;
  } & TeamSection | {
    _key: string;
  } & TextContent> | null;
} | null;
// Variable: merkenQuery
// Query: *[_type == "merk"]{    _id,    naam,    logo  }
export type MerkenQueryResult = Array<{
  _id: string;
  naam: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
}>;
// Variable: voorraadQuery
// Query: *[_type == "voorraad" 		&& (!defined($merk) || merk->naam == $merk)		&& (!defined($verkocht) || verkocht == $verkocht)		&& (!defined($uitgelicht) || uitgelicht == $uitgelicht)	]{    _id,    titel,    slug,    merk->{      _id,      naam,      logo    },    prijs,    bouwjaar,    kilometerstand,    brandstof,    transmissie,    verkocht,    uitgelicht,    fotos,    beschrijving,    specificaties  }
export type VoorraadQueryResult = Array<{
  _id: string;
  titel: string | null;
  slug: Slug | null;
  merk: {
    _id: string;
    naam: string | null;
    logo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  prijs: number | null;
  bouwjaar: number | null;
  kilometerstand: number | null;
  brandstof: "benzine" | "diesel" | "elektrisch" | "hybride" | null;
  transmissie: "automaat" | "handgeschakeld" | null;
  verkocht: boolean | null;
  uitgelicht: boolean | null;
  fotos: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  beschrijving: BlockContent | null;
  specificaties: Array<{
    label?: string;
    waarde?: string;
    _key: string;
  }> | null;
}>;
// Variable: voorraadItemQuery
// Query: *[_type == "voorraad" && slug.current == $slug][0]{    _id,    titel,    slug,    merk->{      _id,      naam,      logo    },    prijs,    bouwjaar,    kilometerstand,    brandstof,    transmissie,    verkocht,    uitgelicht,    fotos,    beschrijving,    specificaties  }
export type VoorraadItemQueryResult = {
  _id: string;
  titel: string | null;
  slug: Slug | null;
  merk: {
    _id: string;
    naam: string | null;
    logo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  prijs: number | null;
  bouwjaar: number | null;
  kilometerstand: number | null;
  brandstof: "benzine" | "diesel" | "elektrisch" | "hybride" | null;
  transmissie: "automaat" | "handgeschakeld" | null;
  verkocht: boolean | null;
  uitgelicht: boolean | null;
  fotos: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  beschrijving: BlockContent | null;
  specificaties: Array<{
    label?: string;
    waarde?: string;
    _key: string;
  }> | null;
} | null;
// Variable: pageQuery
// Query: *[_type == "page" && slug.current == $slug][0]{    _id,    title,    slug,    seo,    blocks  }
export type PageQueryResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  seo: {
    metaTitle?: string;
    metaDescription?: string;
  } | null;
  blocks: Array<{
    _key: string;
  } & CardSection | {
    _key: string;
  } & ContentSection | {
    _key: string;
  } & FeaturedVoorraadSection | {
    _key: string;
  } & Hero | {
    _key: string;
  } & HeroImageSection | {
    _key: string;
  } & ImageSection | {
    _key: string;
  } & ReviewsSection | {
    _key: string;
  } & TeamSection | {
    _key: string;
  } & TextContent> | null;
} | null;
// Variable: allPagesQuery
// Query: *[_type == "page"]{    _id,    title,    slug,    seo  }
export type AllPagesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  seo: {
    metaTitle?: string;
    metaDescription?: string;
  } | null;
}>;
// Variable: teamMembersQuery
// Query: *[_type == "teamMember"] | order(_createdAt asc) {    _id,    naam,    functie,    foto,    beschrijving  }
export type TeamMembersQueryResult = Array<{
  _id: string;
  naam: string | null;
  functie: string | null;
  foto: null;
  beschrijving: null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"global\"][0]{\n    _id,\n    title,\n    description\n  }": GlobalQueryResult;
    "*[_type == \"home\"][0]{\n    _id,\n    blocks\n  }": HomeQueryResult;
    "*[_type == \"merk\"]{\n    _id,\n    naam,\n    logo\n  }": MerkenQueryResult;
    "*[_type == \"voorraad\" \n\t\t&& (!defined($merk) || merk->naam == $merk)\n\t\t&& (!defined($verkocht) || verkocht == $verkocht)\n\t\t&& (!defined($uitgelicht) || uitgelicht == $uitgelicht)\n\t]{\n    _id,\n    titel,\n    slug,\n    merk->{\n      _id,\n      naam,\n      logo\n    },\n    prijs,\n    bouwjaar,\n    kilometerstand,\n    brandstof,\n    transmissie,\n    verkocht,\n    uitgelicht,\n    fotos,\n    beschrijving,\n    specificaties\n  }": VoorraadQueryResult;
    "*[_type == \"voorraad\" && slug.current == $slug][0]{\n    _id,\n    titel,\n    slug,\n    merk->{\n      _id,\n      naam,\n      logo\n    },\n    prijs,\n    bouwjaar,\n    kilometerstand,\n    brandstof,\n    transmissie,\n    verkocht,\n    uitgelicht,\n    fotos,\n    beschrijving,\n    specificaties\n  }": VoorraadItemQueryResult;
    "*[_type == \"page\" && slug.current == $slug][0]{\n    _id,\n    title,\n    slug,\n    seo,\n    blocks\n  }": PageQueryResult;
    "*[_type == \"page\"]{\n    _id,\n    title,\n    slug,\n    seo\n  }": AllPagesQueryResult;
    "*[_type == \"teamMember\"] | order(_createdAt asc) {\n    _id,\n    naam,\n    functie,\n    foto,\n    beschrijving\n  }": TeamMembersQueryResult;
  }
}
